[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Caroline Website",
    "section": "",
    "text": "My name is Caroline, 28 y/o, an student of MS in Statistic and I am creating a home page for testing.\n\nLast Updated: Wednesday 02 19, 2025 at 10:52AM"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini #01 - Tax Money Stuff",
    "section": "",
    "text": "In this project, I will be awesome.\nFirst, let’s get some data:\n\nif(!file.exists(\"data/mp01/nyc_payroll_export.csv\")){\n    dir.create(\"data/mp01\", showWarnings=FALSE, recursive=TRUE)\n    \n    ENDPOINT &lt;- \"https://data.cityofnewyork.us/resource/k397-673e.json\"\n    \n    if(!require(\"httr2\")) install.packages(\"httr2\")\n    library(httr2)\n    \n    if(!require(\"jsonlite\")) install.packages(\"jsonlite\")\n    library(jsonlite)\n    \n    if(!require(\"dplyr\")) install.packages(\"dplyr\")\n    library(dplyr)\n    \n    if(!require(\"readr\")) install.packages(\"readr\")\n    library(readr)\n    \n    BATCH_SIZE &lt;- 50000\n    OFFSET     &lt;- 0\n    END_OF_EXPORT &lt;- FALSE\n    ALL_DATA &lt;- list()\n    \n    while(!END_OF_EXPORT){\n        cat(\"Requesting items\", OFFSET, \"to\", BATCH_SIZE + OFFSET, \"\\n\")\n        \n        req &lt;- request(ENDPOINT) |&gt;\n                  req_url_query(`$limit`  = BATCH_SIZE, \n                                `$offset` = OFFSET)\n        \n        resp &lt;- req_perform(req)\n        \n        batch_data &lt;- fromJSON(resp_body_string(resp))\n        \n        ALL_DATA &lt;- c(ALL_DATA, list(batch_data))\n        \n        if(NROW(batch_data) != BATCH_SIZE){\n            END_OF_EXPORT &lt;- TRUE\n            \n            cat(\"End of Data Export Reached\\n\")\n        } else {\n            OFFSET &lt;- OFFSET + BATCH_SIZE\n        }\n    }\n    \n    ALL_DATA &lt;- bind_rows(ALL_DATA)\n    \n    cat(\"Data export complete:\", NROW(ALL_DATA), \"rows and\", NCOL(ALL_DATA), \"columns.\")\n    \n    write_csv(ALL_DATA, \"data/mp01/nyc_payroll_export.csv\")\n}\n\nLook at all this cool data!\n\nlibrary(readr)\nnyc_payroll &lt;- read_csv(\"data/mp01/nyc_payroll_export.csv\")\n\nRows: 6225611 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): agency_name, last_name, first_name, mid_init, work_location_boroug...\ndbl  (8): fiscal_year, payroll_number, base_salary, regular_hours, regular_g...\ndttm (1): agency_start_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis data has lots of numbers!\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nglimpse(nyc_payroll)\n\nRows: 6,225,611\nColumns: 17\n$ fiscal_year                &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2…\n$ payroll_number             &lt;dbl&gt; 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,…\n$ agency_name                &lt;chr&gt; \"ADMIN FOR CHILDREN'S SVCS\", \"ADMIN FOR CHI…\n$ last_name                  &lt;chr&gt; \"FAYE FALL\", \"KILGORE\", \"WISDOM\", \"MILLER\",…\n$ first_name                 &lt;chr&gt; \"SOKHNA\", \"ORLANTHA\", \"CHERISE\", \"MOYA-GAYE…\n$ mid_init                   &lt;chr&gt; \"M\", \"B\", \"M\", \"S\", \"M\", \"L\", \"O\", NA, \"N\",…\n$ agency_start_date          &lt;dttm&gt; 2023-11-20, 2023-08-28, 2022-10-24, 2023-0…\n$ work_location_borough      &lt;chr&gt; \"BRONX\", \"BROOKLYN\", \"MANHATTAN\", \"MANHATTA…\n$ title_description          &lt;chr&gt; \"CHILD PROTECTIVE SPECIALIST\", \"CHILD PROTE…\n$ leave_status_as_of_june_30 &lt;chr&gt; \"ACTIVE\", \"ACTIVE\", \"ON LEAVE\", \"ON LEAVE\",…\n$ base_salary                &lt;dbl&gt; 62043, 62043, 43144, 62043, 60236, 62043, 6…\n$ pay_basis                  &lt;chr&gt; \"per Annum\", \"per Annum\", \"per Annum\", \"per…\n$ regular_hours              &lt;dbl&gt; 1050.00, 1470.00, 1251.50, 1400.75, 700.00,…\n$ regular_gross_paid         &lt;dbl&gt; 31267.96, 44660.96, 28649.20, 44515.43, 221…\n$ ot_hours                   &lt;dbl&gt; 12.00, 99.75, 30.00, 44.75, 53.00, 146.00, …\n$ total_ot_paid              &lt;dbl&gt; 425.00, 3859.84, 802.42, 1476.98, 1933.33, …\n$ total_other_pay            &lt;dbl&gt; 78.04, 78.14, 78.26, 78.37, 78.47, 78.86, 7…"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini #02 - Identifying Environmentally Responsible US Public Transit Systems",
    "section": "",
    "text": "Among the commonly cited benefits of robust public transit is a reduction in environmental impact. In this mini-project, we will explore US Public Transit systems to assess their environmental efficiency. Our analysis will use a variety of data sources to:\n\nDetermine how many riders are served by different transit systems.\nDetermine how far each public transit system transports an average rider.\nInvestigate the effective emissions associated with each form of transit."
  },
  {
    "objectID": "mp02.html#introduction",
    "href": "mp02.html#introduction",
    "title": "Mini #02 - Identifying Environmentally Responsible US Public Transit Systems",
    "section": "",
    "text": "Among the commonly cited benefits of robust public transit is a reduction in environmental impact. In this mini-project, we will explore US Public Transit systems to assess their environmental efficiency. Our analysis will use a variety of data sources to:\n\nDetermine how many riders are served by different transit systems.\nDetermine how far each public transit system transports an average rider.\nInvestigate the effective emissions associated with each form of transit."
  },
  {
    "objectID": "mp02.html#data-acquisition",
    "href": "mp02.html#data-acquisition",
    "title": "Mini #02 - Identifying Environmentally Responsible US Public Transit Systems",
    "section": "Data Acquisition",
    "text": "Data Acquisition\nFor this mini-project, we will download the following details:\n\nEIA State Electricity Profiles: Used to estimate the environmental impact of the electricity used to run certain transit systems."
  },
  {
    "objectID": "mp02.html#task-1-importing-eia-state-electricity-profiles-data",
    "href": "mp02.html#task-1-importing-eia-state-electricity-profiles-data",
    "title": "Mini #02 - Identifying Environmentally Responsible US Public Transit Systems",
    "section": "Task 1: Importing EIA State Electricity Profiles Data",
    "text": "Task 1: Importing EIA State Electricity Profiles Data\nFor purposes of this analysis, we assume that all electricity generation in a state is fungible. That is, we assign the average generation emissions to all electric transit in a state, even if the transit authority officially has a “green supply” agreement in place.\nThe following code will parse the EIA SEP summary pages and create a “tidy” table for analysis:\n\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\nlibrary(rvest)\nlibrary(httr2)\nlibrary(purrr)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nlibrary(DT)\n\nget_eia_sep &lt;- function(state, abbr){\n    state_formatted &lt;- str_to_lower(state) %&gt;% str_replace_all(\"\\\\s\", \"\")\n\n    dir_name &lt;- file.path(\"data\", \"mp02\")\n    file_name &lt;- file.path(dir_name, state_formatted)\n    \n    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n    \n    if (!file.exists(file_name)) {\n        BASE_URL &lt;- \"https://www.eia.gov\"\n        REQUEST &lt;- request(BASE_URL) %&gt;% \n            req_url_path(\"electricity\", \"state\", state_formatted) %&gt;% \n            req_headers(\"User-Agent\" = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\")\n    \n        RESPONSE &lt;- req_perform(REQUEST)\n    \n        resp_check_status(RESPONSE)\n        \n        writeLines(resp_body_string(RESPONSE), file_name)\n    }\n\n    message(\"Checking file: \", file_name)  \n\n    if (!file.exists(file_name)) {\n        message(\"File not found after request for \", state)\n        return(NULL)\n    }\n\n    TABLE_RAW &lt;- read_html(file_name) %&gt;% html_element(\"table\")\n\n    if (is.null(TABLE_RAW)) {\n        message(\"No table found for \", state)\n        return(NULL)\n    }\n\n    TABLE &lt;- TABLE_RAW %&gt;% \n        html_table() %&gt;% \n        mutate(Item = str_to_lower(Item))\n\n    if(\"U.S. rank\" %in% colnames(TABLE)){\n        TABLE &lt;- TABLE %&gt;% rename(Rank = `U.S. rank`)\n    }\n    \n    CO2_MWh &lt;- TABLE %&gt;% \n        filter(Item == \"carbon dioxide (lbs/mwh)\") %&gt;%\n        pull(Value) %&gt;% \n        str_replace_all(\",\", \"\") %&gt;%\n        as.numeric()\n    \n    PRIMARY &lt;- TABLE %&gt;% \n        filter(Item == \"primary energy source\") %&gt;% \n        pull(Rank)\n    \n    RATE &lt;- TABLE %&gt;%\n        filter(Item == \"average retail price (cents/kwh)\") %&gt;%\n        pull(Value) %&gt;%\n        as.numeric()\n    \n    GENERATION_MWh &lt;- TABLE %&gt;%\n        filter(Item == \"net generation (megawatthours)\") %&gt;%\n        pull(Value) %&gt;%\n        str_replace_all(\",\", \"\") %&gt;%\n        as.numeric()\n    \n    data.frame(CO2_MWh               = CO2_MWh, \n               primary_source        = PRIMARY,\n               electricity_price_MWh = RATE * 10, \n               generation_MWh        = GENERATION_MWh, \n               state                 = state, \n               abbreviation          = abbr\n    )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) %&gt;% \n                  purrr::compact() %&gt;% \n                  dplyr::bind_rows()\n\nChecking file: data/mp02/alabama\n\n\nChecking file: data/mp02/alaska\n\n\nChecking file: data/mp02/arizona\n\n\nChecking file: data/mp02/arkansas\n\n\nChecking file: data/mp02/california\n\n\nChecking file: data/mp02/colorado\n\n\nChecking file: data/mp02/connecticut\n\n\nChecking file: data/mp02/delaware\n\n\nChecking file: data/mp02/florida\n\n\nChecking file: data/mp02/georgia\n\n\nChecking file: data/mp02/hawaii\n\n\nChecking file: data/mp02/idaho\n\n\nChecking file: data/mp02/illinois\n\n\nChecking file: data/mp02/indiana\n\n\nChecking file: data/mp02/iowa\n\n\nChecking file: data/mp02/kansas\n\n\nChecking file: data/mp02/kentucky\n\n\nChecking file: data/mp02/louisiana\n\n\nChecking file: data/mp02/maine\n\n\nChecking file: data/mp02/maryland\n\n\nChecking file: data/mp02/massachusetts\n\n\nChecking file: data/mp02/michigan\n\n\nChecking file: data/mp02/minnesota\n\n\nChecking file: data/mp02/mississippi\n\n\nChecking file: data/mp02/missouri\n\n\nChecking file: data/mp02/montana\n\n\nChecking file: data/mp02/nebraska\n\n\nChecking file: data/mp02/nevada\n\n\nChecking file: data/mp02/newhampshire\n\n\nChecking file: data/mp02/newjersey\n\n\nChecking file: data/mp02/newmexico\n\n\nChecking file: data/mp02/newyork\n\n\nChecking file: data/mp02/northcarolina\n\n\nChecking file: data/mp02/northdakota\n\n\nChecking file: data/mp02/ohio\n\n\nChecking file: data/mp02/oklahoma\n\n\nChecking file: data/mp02/oregon\n\n\nChecking file: data/mp02/pennsylvania\n\n\nChecking file: data/mp02/rhodeisland\n\n\nChecking file: data/mp02/southcarolina\n\n\nChecking file: data/mp02/southdakota\n\n\nChecking file: data/mp02/tennessee\n\n\nChecking file: data/mp02/texas\n\n\nChecking file: data/mp02/utah\n\n\nChecking file: data/mp02/vermont\n\n\nChecking file: data/mp02/virginia\n\n\nChecking file: data/mp02/washington\n\n\nChecking file: data/mp02/westvirginia\n\n\nChecking file: data/mp02/wisconsin\n\n\nChecking file: data/mp02/wyoming\n\nEIA_SEP_REPORT &lt;- EIA_SEP_REPORT %&gt;% \n    mutate(electricity_price_MWh = dollar(electricity_price_MWh, accuracy = 0.01))\n\nDT::datatable(EIA_SEP_REPORT) %&gt;%\n  formatStyle(\n    \"CO2_MWh\",  # Align CO2_MWh to left\n    `text-align` = \"left\"\n  ) %&gt;%\n  formatStyle(\n    \"generation_MWh\",  # Align generation_MWh to left\n    `text-align` = \"left\"\n  )"
  },
  {
    "objectID": "mp02.html#task-2-initial-analysis-of-sep-data",
    "href": "mp02.html#task-2-initial-analysis-of-sep-data",
    "title": "Mini #02 - Identifying Environmentally Responsible US Public Transit Systems",
    "section": "Task 2: Initial Analysis of SEP Data",
    "text": "Task 2: Initial Analysis of SEP Data\nWhich state has the most expensive retail electricity?"
  }
]